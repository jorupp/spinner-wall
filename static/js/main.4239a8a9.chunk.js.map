{"version":3,"sources":["d3WallDisplay.tsx","wall.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["D3WallDisplay","props","ref","React","svgHeight","window","innerHeight","svgWidth","innerWidth","yEdgeGap","xEdgeGap","yPart","height","xPart","width","yRange","d3","domain","range","gap","cellHeight","xRange","cellWidth","cellSize","Math","min","current","cells","selectAll","data","join","enter","append","attr","d","ix","x","y","floor","tx","ty","arc","innerRadius","outerRadius","startAngle","maxRotationValue","PI","transition","duration","attrTween","interpolate","this","_current","t","endAngle","className","patterns","_","map","i","flatPatterns","Wall","value","incrementIx","flatData","setTimeout","onClick","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4239a8a9.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface D3WallDisplayProps {\r\n    height: number;\r\n    width: number;\r\n    maxRotationValue: number;\r\n    data: number[];\r\n}\r\n\r\nconst spinnerRatio = 0.2;\r\n\r\nconst D3WallDisplay: React.FunctionComponent<D3WallDisplayProps> = (props) => {\r\n    const ref = React.useRef<SVGSVGElement>(null);\r\n    const lastValues = React.useRef<number[]>([]);\r\n    const svgHeight = window.innerHeight - 10;\r\n    const svgWidth = window.innerWidth;\r\n    const gap = 5;\r\n    let yEdgeGap = 10;\r\n    let xEdgeGap = 10;\r\n    const yPart = (svgHeight - yEdgeGap * 2 + gap) / props.height;\r\n    const xPart = (svgWidth - xEdgeGap * 2 + gap) / props.width;\r\n    if (yPart > xPart) {\r\n        yEdgeGap += (yPart - xPart) * props.height / 2;\r\n    }\r\n    else if (xPart > yPart) {\r\n        xEdgeGap += (xPart - yPart) * props.width / 2;\r\n    }\r\n    const yRange = d3.scaleLinear().domain([0, props.height]).range([ yEdgeGap - gap/2, svgHeight - yEdgeGap + gap/2 ]);\r\n    const cellHeight = yRange(1)-yRange(0) - gap;\r\n    const xRange = d3.scaleLinear().domain([0, props.width]).range([ xEdgeGap - gap/2, svgWidth - xEdgeGap + gap/2 ]);\r\n    const cellWidth = xRange(1)-xRange(0) - gap;\r\n    const cellSize = Math.min(cellHeight, cellWidth);\r\n\r\n    React.useEffect(() => {\r\n        if (!ref.current) {\r\n            return;\r\n        }\r\n\r\n        const svg = d3.select(ref.current);\r\n        const root = svg.selectAll('g.root')\r\n            .data([0])\r\n            .join(enter => enter.append('g').attr('class', 'root'));\r\n\r\n        const cells = root.selectAll('g.cell')\r\n            .data(props.data)\r\n            .join(enter => enter.append('g').attr('class', 'cell'))\r\n            .attr('transform', (d, ix) => {\r\n                const x = ix % props.width;\r\n                const y = Math.floor(ix / props.width);\r\n                const tx = xRange(x + 0.5);\r\n                const ty = yRange(y + 0.5);\r\n                return `translate(${tx},${ty})`;\r\n            });\r\n        // cells.selectAll('rect.border')\r\n        //     .data([0])\r\n        //     .join(enter => enter.append('rect').attr('class', 'border'))\r\n        //     .attr('x', -cellSize/2)\r\n        //     .attr('y', -cellSize/2)\r\n        //     .attr('width', cellSize)\r\n        //     .attr('height', cellSize)\r\n        //     .attr('style', 'stroke-width: 3; stroke: black; fill: none;');\r\n        \r\n        const arc = d3.arc().innerRadius(0).outerRadius(cellSize/2).startAngle(0);\r\n        const arcTween = function(this: any, d: number) {\r\n            const interpolate = d3.interpolate(this._current as number, d);\r\n            this._current = d;\r\n            return function(t: number) {\r\n                return arc({ endAngle: interpolate(t) } as any) as string;\r\n            }\r\n        }\r\n        cells.selectAll('path.color')\r\n            .data(d => [d / props.maxRotationValue * Math.PI * 2])\r\n            .join(enter => enter.append('path').attr('class', 'color'))\r\n            .attr('style', 'fill: red;')\r\n            .transition()\r\n            .duration(100)\r\n            .attrTween('d', arcTween)\r\n        ;\r\n\r\n        const rotateTween = function(this: any, d: number) {\r\n            // console.log({ t: this });\r\n            return d3.interpolateString(d3.select(this).attr('transform'), `rotate(${d / props.maxRotationValue * 360 + 90})`);\r\n        }\r\n        cells.selectAll('rect.spinner')\r\n            .data(d => [d])\r\n            .join(enter => enter.append('rect').attr('class', 'spinner'))\r\n            .attr('x', -cellSize/2)\r\n            .attr('width', cellSize)\r\n            .attr('y', -cellSize*spinnerRatio/2)\r\n            .attr('height', cellSize*spinnerRatio)\r\n            .attr('style', 'fill: black')\r\n            .transition().duration(150)\r\n            // .ease(d3.easeBounceOut)\r\n            .attrTween('transform', rotateTween)\r\n            // .attr('transform', d => `rotate(${d / props.maxRotationValue * 360 + 90})`)\r\n        ;\r\n\r\n        // div.style.columnCount = '' + props.width;\r\n        // if(div.children.length !== props.height * props.width) {\r\n        //     lastValues.current = _.range(0, props.height * props.width).map(i => 0);\r\n        //     const r = document.createRange();\r\n        //     r.selectNodeContents(div);\r\n        //     r.deleteContents();\r\n\r\n        //     for(let y = 0; y < props.height; y++) {\r\n        //         for(let x = 0; x < props.width; x++) {\r\n        //             const c = document.createElement('div');\r\n        //             c.className = 'cell';\r\n        //             c.style.gridRow = '' + (y + 1);\r\n        //             c.style.gridColumn = '' + (x + 1);\r\n\r\n        //             const s = document.createElement('div');\r\n        //             s.className = 'spinner';\r\n        //             c.appendChild(s);\r\n\r\n        //             div.appendChild(c);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // for(let y = 0; y < props.height; y++) {\r\n        //     for(let x = 0; x < props.width; x++) {\r\n        //         const i = y * props.width + x;\r\n        //         const s = div.children.item(i)?.firstChild as HTMLDivElement;\r\n        //         const r = getClosestRotationValue(props.data[y][x] / props.maxRotationValue * 360, lastValues.current[i], 180);\r\n        //         lastValues.current[i] = r;\r\n        //         s.style.transform = 'rotate(' + r + 'deg)';\r\n        //     }\r\n        // }\r\n\r\n\r\n    });\r\n    return <svg className=\"d3-wall-display\" ref={ref} height={svgHeight} width={svgWidth}/>;\r\n};\r\n\r\nexport default D3WallDisplay;\r\n","import * as React from 'react';\r\nimport WallDisplay from './wallDisplay';\r\nimport * as _ from 'lodash';\r\nimport FastWallDisplay from './fastWallDisplay';\r\nimport D3WallDisplay from './d3WallDisplay';\r\n\r\ninterface WallProps {\r\n}\r\n\r\nconst yR = 24;\r\nconst xR = 48;\r\nconst patterns = _.range(0,12).map(i => _.range(0, yR).map(y => _.range(0, xR).map(x => (i + x + y) % 13)));\r\nconst flatPatterns = patterns.map(i => _.flatten(i));\r\n\r\nconst Wall: React.FunctionComponent<WallProps> = (props) => {\r\n    const [ ix, incrementIx ] = React.useReducer((value) => (value + 1) % 12, 0);\r\n    const data = patterns[ix];\r\n    const flatData = flatPatterns[ix];\r\n    // React.useEffect(() => {\r\n    //     const t = setInterval(incrementIx, 500);\r\n\r\n    //     return () => { clearInterval(t); }\r\n    // }, [incrementIx]);\r\n    React.useEffect(() => {\r\n        setTimeout(incrementIx, 250);\r\n    }, [ix, incrementIx])\r\n\r\n    const onClick = React.useCallback(() => {}, []);\r\n\r\n\r\n    // const [data, setData] = React.useState(_.range(0, 12).map(i => _.range(0, 24).map(ii => (i + ii) % 12)));\r\n    // const onClick = React.useCallback(() => {\r\n    //     if (Math.random() < 0.5) {\r\n    //         const offset = Math.floor(Math.random() * 12);\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => (offset + i + ii) % 12)));\r\n    //     } else {\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => Math.floor(Math.random() * 12))));\r\n    //     }\r\n    // }, [ setData ]);\r\n\r\n    return (\r\n        <div onClick={onClick}>\r\n            {/* <WallDisplay height={data.length} width={data[0].length} maxRotationValue={12} data={data} />; */}\r\n            {/* <FastWallDisplay height={data.length} width={data[0].length} maxRotationValue={12} data={data} /> */}\r\n            <D3WallDisplay height={yR} width={xR} maxRotationValue={12} data={flatData} />\r\n        </div>\r\n    );\r\n    // return (\r\n    //     <></>\r\n    // );\r\n};\r\n\r\nexport default Wall;\r\n","import React from 'react';\r\nimport Wall from './wall';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Wall/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}