{"version":3,"sources":["fastWallDisplay.tsx","utils.ts","wall.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FastWallDisplay","props","ref","React","lastValues","div","current","style","columnCount","width","children","length","height","_","map","i","r","document","createRange","selectNodeContents","deleteContents","y","x","c","createElement","className","gridRow","gridColumn","s","appendChild","item","firstChild","newValue","data","maxRotationValue","oldValue","mod","transform","patterns","Wall","value","ix","incrementIx","setTimeout","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAqEeA,G,MAxDwD,SAACC,GACpE,IAAMC,EAAMC,SAA6B,MACnCC,EAAaD,SAAuB,IA0C1C,OAzCAA,aAAgB,WACZ,IAAME,EAAMH,EAAII,QAChB,GAAKD,EAAL,CAKA,GADAA,EAAIE,MAAMC,YAAc,GAAKP,EAAMQ,MAChCJ,EAAIK,SAASC,SAAWV,EAAMW,OAASX,EAAMQ,MAAO,CACnDL,EAAWE,QAAUO,QAAQ,EAAGZ,EAAMW,OAASX,EAAMQ,OAAOK,KAAI,SAAAC,GAAC,OAAI,KACrE,IAAMC,EAAIC,SAASC,cACnBF,EAAEG,mBAAmBd,GACrBW,EAAEI,iBAEF,IAAI,IAAIC,EAAI,EAAGA,EAAIpB,EAAMW,OAAQS,IAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAIrB,EAAMQ,MAAOa,IAAK,CACjC,IAAMC,EAAIN,SAASO,cAAc,OACjCD,EAAEE,UAAY,OACdF,EAAEhB,MAAMmB,QAAU,IAAML,EAAI,GAC5BE,EAAEhB,MAAMoB,WAAa,IAAML,EAAI,GAE/B,IAAMM,EAAIX,SAASO,cAAc,OACjCI,EAAEH,UAAY,UACdF,EAAEM,YAAYD,GAEdvB,EAAIwB,YAAYN,IAK5B,IAAI,IAAIF,EAAI,EAAGA,EAAIpB,EAAMW,OAAQS,IAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAIrB,EAAMQ,MAAOa,IAAK,CAAC,IAAD,EAC3BP,EAAIM,EAAIpB,EAAMQ,MAAQa,EACtBM,EAAC,UAAGvB,EAAIK,SAASoB,KAAKf,UAArB,aAAG,EAAsBgB,WAC1Bf,GCjDkBgB,EDiDU/B,EAAMgC,KAAKZ,GAAGC,GAAKrB,EAAMiC,iBAAmB,KCjDpCC,EDiDyC/B,EAAWE,QAAQS,OChDjGoB,EAAWH,IAD4CI,EDiD8C,KChDtE,IAAMA,GAAQA,EAAO,GAAMA,IDiD/DhC,EAAWE,QAAQS,GAAKC,EACxBY,EAAErB,MAAM8B,UAAY,UAAYrB,EAAI,OCnDb,IAACgB,EAAkBG,EAAkBC,MDyDjE,uBAAKX,UAAU,eAAevB,IAAKA,ME/CxCoC,EAAWzB,QAAQ,EAAE,IAAIC,KAAI,SAAAC,GAAC,OAAIF,QAAQ,EAFrC,IAE4CC,KAAI,SAAAO,GAAC,OAAIR,QAAQ,EAD7D,IACoEC,KAAI,SAAAQ,GAAC,OAAKP,EAAIO,EAAID,GAAK,YAsCvFkB,EApCkC,SAACtC,GAAW,IAAD,EAC5BE,cAAiB,SAACqC,GAAD,OAAYA,EAAQ,GAAK,KAAI,GADlB,mBAChDC,EADgD,KAC5CC,EAD4C,KAElDT,EAAOK,EAASG,GAMtBtC,aAAgB,WACZwC,WAAWD,EAAa,OACzB,CAACD,EAAIC,IAER,IAAME,EAAUzC,eAAkB,cAAU,IAa5C,OACI,uBAAKyC,QAASA,GAEV,gBAAC,EAAD,CAAiBhC,OAAQqB,EAAKtB,OAAQF,MAAOwB,EAAK,GAAGtB,OAAQuB,iBAAkB,GAAID,KAAMA,MC/BtFY,EANO,WACpB,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a6225087.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'lodash';\r\n\r\nimport './wallDisplay.scss';\r\nimport { getClosestRotationValue } from './utils';\r\n\r\ninterface FastWallDisplayProps {\r\n    height: number;\r\n    width: number;\r\n    maxRotationValue: number;\r\n    data: number[][];\r\n}\r\n\r\nconst FastWallDisplay: React.FunctionComponent<FastWallDisplayProps> = (props) => {\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n    const lastValues = React.useRef<number[]>([]);\r\n    React.useEffect(() => {\r\n        const div = ref.current;\r\n        if (!div) {\r\n            return;\r\n        }\r\n\r\n        div.style.columnCount = '' + props.width;\r\n        if(div.children.length !== props.height * props.width) {\r\n            lastValues.current = _.range(0, props.height * props.width).map(i => 0);\r\n            const r = document.createRange();\r\n            r.selectNodeContents(div);\r\n            r.deleteContents();\r\n\r\n            for(let y = 0; y < props.height; y++) {\r\n                for(let x = 0; x < props.width; x++) {\r\n                    const c = document.createElement('div');\r\n                    c.className = 'cell';\r\n                    c.style.gridRow = '' + (y + 1);\r\n                    c.style.gridColumn = '' + (x + 1);\r\n\r\n                    const s = document.createElement('div');\r\n                    s.className = 'spinner';\r\n                    c.appendChild(s);\r\n\r\n                    div.appendChild(c);\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let y = 0; y < props.height; y++) {\r\n            for(let x = 0; x < props.width; x++) {\r\n                const i = y * props.width + x;\r\n                const s = div.children.item(i)?.firstChild as HTMLDivElement;\r\n                const r = getClosestRotationValue(props.data[y][x] / props.maxRotationValue * 360, lastValues.current[i], 180);\r\n                lastValues.current[i] = r;\r\n                s.style.transform = 'rotate(' + r + 'deg)';\r\n            }\r\n        }\r\n\r\n\r\n    });\r\n    return <div className=\"wall-display\" ref={ref}/>;\r\n    // return (\r\n    //     <div className=\"wall-display\" style={ { columnCount: props.width }}>\r\n    //         {_.range(0, props.height).map(y => {\r\n    //             return _.range(0, props.width).map(x => {\r\n    //                 return <Cell key={`${y}_${x}`} style={ { gridColumn: x + 1, gridRow: y + 1 }} maxValue={props.maxRotationValue} value={props.data[y][x]}/>;\r\n    //             })\r\n    //         })}\r\n    //     </div>\r\n    // )\r\n};\r\n\r\nexport default FastWallDisplay;\r\n","export const getClosestRotationValue = (newValue: number, oldValue: number, mod: number) => {\r\n    const delta = (((oldValue - newValue) % mod) + (1.5 * mod)) % mod - (0.5 * mod);\r\n    return oldValue - delta;\r\n}\r\n\r\n// const testIt = (n: number, o: number) => {\r\n//     console.log({ n, o,  r: getClosestRotationValue(n,o,180) })\r\n// }\r\n\r\n// testIt(0, 180);\r\n// testIt(0, 190);\r\n// testIt(0, 360);\r\n// testIt(0, 370);\r\n\r\n// testIt(10, 180);\r\n// testIt(10, 190);\r\n// testIt(10, 360);\r\n// testIt(10, 370);\r\n\r\n\r\n","import * as React from 'react';\r\nimport WallDisplay from './wallDisplay';\r\nimport * as _ from 'lodash';\r\nimport FastWallDisplay from './fastWallDisplay';\r\n\r\ninterface WallProps {\r\n}\r\n\r\nconst yR = 24;\r\nconst xR = 48;\r\nconst patterns = _.range(0,12).map(i => _.range(0, yR).map(y => _.range(0, xR).map(x => (i + x + y) % 12)));\r\n\r\nconst Wall: React.FunctionComponent<WallProps> = (props) => {\r\n    const [ ix, incrementIx ] = React.useReducer((value) => (value + 1) % 12, 0);\r\n    const data = patterns[ix];\r\n    // React.useEffect(() => {\r\n    //     const t = setInterval(incrementIx, 500);\r\n\r\n    //     return () => { clearInterval(t); }\r\n    // }, [incrementIx]);\r\n    React.useEffect(() => {\r\n        setTimeout(incrementIx, 200);\r\n    }, [ix, incrementIx])\r\n\r\n    const onClick = React.useCallback(() => {}, []);\r\n\r\n\r\n    // const [data, setData] = React.useState(_.range(0, 12).map(i => _.range(0, 24).map(ii => (i + ii) % 12)));\r\n    // const onClick = React.useCallback(() => {\r\n    //     if (Math.random() < 0.5) {\r\n    //         const offset = Math.floor(Math.random() * 12);\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => (offset + i + ii) % 12)));\r\n    //     } else {\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => Math.floor(Math.random() * 12))));\r\n    //     }\r\n    // }, [ setData ]);\r\n\r\n    return (\r\n        <div onClick={onClick}>\r\n            {/* <WallDisplay height={data.length} width={data[0].length} maxRotationValue={12} data={data} />; */}\r\n            <FastWallDisplay height={data.length} width={data[0].length} maxRotationValue={12} data={data} />\r\n        </div>\r\n    );\r\n    // return (\r\n    //     <></>\r\n    // );\r\n};\r\n\r\nexport default Wall;\r\n","import React from 'react';\nimport Wall from './wall';\n\nconst App: React.FC = () => {\n  return (\n    <Wall/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}