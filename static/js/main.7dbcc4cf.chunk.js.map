{"version":3,"sources":["d3WallDisplay.tsx","liveWall.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["D3WallDisplay","props","ref","React","svgHeight","window","innerHeight","svgWidth","innerWidth","yEdgeGap","xEdgeGap","yPart","height","xPart","width","yRange","d3","domain","range","gap","cellHeight","xRange","cellWidth","cellSize","Math","min","current","cells","selectAll","data","join","enter","append","attr","d","ix","x","y","floor","tx","ty","withColor","arc","innerRadius","outerRadius","startAngle","maxRotationValue","PI","transition","duration","attrTween","interpolate","this","_current","t","endAngle","remove","bars","className","LiveWall","recentFrameTimes","canvas","values","setData","error","setError","showCanvas","setShowCanvas","toggleCanvas","sess","gm","stream","start","catch","e","console","log","toString","input","pipeline","max","output","init","timeout","requestAnimationFrame","callback","getImageBuffer","runOp","shape","_","flatMap","i","map","ii","get","now","Date","push","filter","getTime","cancelAnimationFrame","style","position","onClick","length","display","zIndex","opacity","top","left","transform","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dbcc4cf.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface D3WallDisplayProps {\r\n    height: number;\r\n    width: number;\r\n    maxRotationValue: number;\r\n    data: number[];\r\n    withColor?: boolean;\r\n}\r\n\r\nconst spinnerRatio = 0.2;\r\n\r\nconst D3WallDisplay: React.FunctionComponent<D3WallDisplayProps> = (props) => {\r\n    const ref = React.useRef<SVGSVGElement>(null);\r\n    const lastValues = React.useRef<number[]>([]);\r\n    const svgHeight = window.innerHeight - 10;\r\n    const svgWidth = window.innerWidth;\r\n    const gap = 5;\r\n    let yEdgeGap = 10;\r\n    let xEdgeGap = 10;\r\n    const yPart = (svgHeight - yEdgeGap * 2 + gap) / props.height;\r\n    const xPart = (svgWidth - xEdgeGap * 2 + gap) / props.width;\r\n    if (yPart > xPart) {\r\n        yEdgeGap += (yPart - xPart) * props.height / 2;\r\n    }\r\n    else if (xPart > yPart) {\r\n        xEdgeGap += (xPart - yPart) * props.width / 2;\r\n    }\r\n    const yRange = d3.scaleLinear().domain([0, props.height]).range([ yEdgeGap - gap/2, svgHeight - yEdgeGap + gap/2 ]);\r\n    const cellHeight = yRange(1)-yRange(0) - gap;\r\n    const xRange = d3.scaleLinear().domain([0, props.width]).range([ xEdgeGap - gap/2, svgWidth - xEdgeGap + gap/2 ]);\r\n    const cellWidth = xRange(1)-xRange(0) - gap;\r\n    const cellSize = Math.min(cellHeight, cellWidth);\r\n\r\n    React.useEffect(() => {\r\n        if (!ref.current) {\r\n            return;\r\n        }\r\n\r\n        const svg = d3.select(ref.current);\r\n        const root = svg.selectAll('g.root')\r\n            .data([0])\r\n            .join(enter => enter.append('g').attr('class', 'root'));\r\n\r\n        const cells = root.selectAll('g.cell')\r\n            .data(props.data)\r\n            .join(enter => enter.append('g').attr('class', 'cell'))\r\n            .attr('transform', (d, ix) => {\r\n                const x = ix % props.width;\r\n                const y = Math.floor(ix / props.width);\r\n                const tx = xRange(x + 0.5);\r\n                const ty = yRange(y + 0.5);\r\n                return `translate(${tx},${ty})`;\r\n            });\r\n        // cells.selectAll('rect.border')\r\n        //     .data([0])\r\n        //     .join(enter => enter.append('rect').attr('class', 'border'))\r\n        //     .attr('x', -cellSize/2)\r\n        //     .attr('y', -cellSize/2)\r\n        //     .attr('width', cellSize)\r\n        //     .attr('height', cellSize)\r\n        //     .attr('style', 'stroke-width: 3; stroke: black; fill: none;');\r\n        \r\n        if(props.withColor) {\r\n            const arc = d3.arc().innerRadius(0).outerRadius(cellSize/2).startAngle(0);\r\n            const arcTween = function(this: any, d: number) {\r\n                const interpolate = d3.interpolate(this._current as number, d);\r\n                this._current = d;\r\n                return function(t: number) {\r\n                    return arc({ endAngle: interpolate(t) } as any) as string;\r\n                }\r\n            }\r\n            cells.selectAll('path.color')\r\n                .data(d => [d / props.maxRotationValue * Math.PI * 2])\r\n                .join(enter => enter.append('path').attr('class', 'color'))\r\n                .attr('style', 'fill: red;')\r\n                .transition()\r\n                .duration(100)\r\n                .attrTween('d', arcTween)\r\n            ;\r\n        } else {\r\n            cells.selectAll('path.color').remove();\r\n        }\r\n\r\n        const bars = cells.selectAll('rect.spinner')\r\n            .data(d => [d])\r\n            .join(enter => enter.append('rect').attr('class', 'spinner'))\r\n            .attr('x', -cellSize/2)\r\n            .attr('width', cellSize)\r\n            .attr('y', -cellSize*spinnerRatio/2)\r\n            .attr('height', cellSize*spinnerRatio)\r\n            .attr('style', 'fill: black')\r\n            .transition().duration(150)\r\n        ;\r\n        if(props.withColor) {\r\n            const rotateTween = function(this: any, d: number) {\r\n                // console.log({ t: this });\r\n                return d3.interpolateString(d3.select(this).attr('transform'), `rotate(${d / props.maxRotationValue * 360 + 90})`);\r\n            }\r\n            bars.attrTween('transform', rotateTween);\r\n        } else {\r\n            bars.attr('transform', d => `rotate(${d / props.maxRotationValue * 360 + 90})`);\r\n        }\r\n    });\r\n    return <svg className=\"d3-wall-display\" ref={ref} height={svgHeight} width={svgWidth}/>;\r\n};\r\n\r\nexport default D3WallDisplay;\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport D3WallDisplay from './d3WallDisplay';\r\nimport * as gm from 'gammacv';\r\n\r\ninterface LiveWallProps {\r\n}\r\n\r\nconst LiveWall: React.FunctionComponent<LiveWallProps> = (props) => {\r\n    const height = 720;\r\n    const width = 1280;\r\n\r\n    const recentFrameTimes = React.useRef<Date[]>([]);\r\n    const canvas = React.useRef<HTMLCanvasElement>(null);\r\n    const [ data, setData ] = React.useState({ x: 0, y: 0, values: [] as number[] });\r\n    const [ error, setError ] = React.useState<string | undefined>();\r\n    const [ showCanvas, setShowCanvas ] = React.useState(false);\r\n    const toggleCanvas = React.useCallback(() => {\r\n        setShowCanvas(!showCanvas);\r\n    }, [showCanvas, setShowCanvas ]);\r\n    React.useEffect(() => {\r\n        const sess = new gm.Session();\r\n        const stream = new gm.CaptureVideo(width, height);\r\n        stream.start().catch((e: string) => {\r\n            console.log(e);\r\n            setError(e.toString());\r\n        });\r\n\r\n        const input = new gm.Tensor('uint8', [height, width, 4]);\r\n        let pipeline = input;\r\n        pipeline = gm.grayscale(pipeline);\r\n        pipeline = gm.hog(pipeline, Math.floor(Math.max(height, width) / 48), 'max');\r\n\r\n        const output = gm.tensorFrom(pipeline);\r\n        sess.init(pipeline);\r\n\r\n        const callback = () => {\r\n            // console.log('anim frame');\r\n            stream.getImageBuffer(input);\r\n            sess.runOp(pipeline, {}, output);\r\n\r\n            // console.log(output);\r\n\r\n            const y = output.shape[0];\r\n            const x = output.shape[1];\r\n            setData({ x, y, values: _.range(0, y).flatMap(i => _.range(0, x).map(ii => output.get(i, ii, 1) as number)) });\r\n            if (canvas.current) {\r\n                gm.canvasFromTensor(canvas.current, input);\r\n            }\r\n            // setData({ x, y, values: [] });\r\n            // console.log(output);\r\n            // console.log(_.take(output.values, 100));\r\n            // window.cancelAnimationFrame(timeout);\r\n            // return;\r\n\r\n            const now = new Date();\r\n            recentFrameTimes.current.push(now);\r\n            recentFrameTimes.current = recentFrameTimes.current.filter(i => now.getTime() < i.getTime() + 1000);\r\n\r\n            timeout = window.requestAnimationFrame(callback);\r\n        }\r\n\r\n        let timeout = window.requestAnimationFrame(callback);\r\n        return () => {\r\n            window.cancelAnimationFrame(timeout);\r\n        };\r\n    }, [ setData ]);\r\n    if (error) {\r\n        return <div>Error: {error}</div>\r\n    }\r\n    // console.log(data);\r\n    const { x, y, values } = data;\r\n    if (x <= 0 || y <= 0) {\r\n        return <div>Enabling camera...</div>\r\n    }\r\n    // console.log({ max: _.max(values), min: _.min(values)});\r\n    // return <div>Dummy</div>;\r\n    return (\r\n        <div>\r\n            <div style={ { position: 'fixed' }}>\r\n                <button onClick={toggleCanvas}>{showCanvas ? 'Hide' : 'Show'} image</button><br/>\r\n                <span>FPS: {recentFrameTimes.current.length}</span>\r\n            </div>\r\n            <canvas height={height} width={width} style={ { display: showCanvas ? 'block' : 'none', zIndex: -1, opacity: 0.3, position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'} } ref={canvas}/>\r\n            <D3WallDisplay height={y} width={x} maxRotationValue={90} data={values} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiveWall;\r\n","import React from 'react';\r\nimport Wall from './wall';\r\nimport LiveWall from './liveWall';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <LiveWall/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}