{"version":3,"sources":["d3WallDisplay.tsx","liveWall.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["D3WallDisplay","props","invert","ref","React","svgHeight","window","innerHeight","svgWidth","innerWidth","yEdgeGap","xEdgeGap","yPart","height","xPart","width","yRange","d3","domain","range","gap","cellHeight","xRange","cellWidth","cellSize","Math","min","current","cells","selectAll","data","join","enter","append","attr","d","ix","x","y","floor","tx","ty","withColor","arc","innerRadius","outerRadius","startAngle","maxRotationValue","PI","transition","duration","attrTween","interpolate","this","_current","t","endAngle","remove","bars","className","LiveWall","setInvert","tempBarCount","setTempBarCount","barCount","setBarCount","recentFrameTimes","canvas","values","setData","error","setError","showCanvas","setShowCanvas","toggleCanvas","sess","gm","stream","start","catch","e","console","log","toString","input","pipeline","hogArg","max","output","init","timeout","requestAnimationFrame","callback","getImageBuffer","runOp","shape","_","flatMap","i","map","ii","get","now","Date","push","filter","getTime","cancelAnimationFrame","style","position","color","display","flexDirection","onClick","length","htmlFor","type","id","onChange","parseInt","target","value","checked","background","zIndex","top","left","right","bottom","opacity","transform","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8a2e916.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\ninterface D3WallDisplayProps {\r\n    height: number;\r\n    width: number;\r\n    maxRotationValue: number;\r\n    data: number[];\r\n    withColor?: boolean;\r\n    invert?: boolean;\r\n}\r\n\r\nconst spinnerRatio = 0.2;\r\n\r\nconst D3WallDisplay: React.FunctionComponent<D3WallDisplayProps> = (props) => {\r\n    const { invert } = props;\r\n    const ref = React.useRef<SVGSVGElement>(null);\r\n    const lastValues = React.useRef<number[]>([]);\r\n    const svgHeight = window.innerHeight - 10;\r\n    const svgWidth = window.innerWidth;\r\n    const gap = 5;\r\n    let yEdgeGap = 10;\r\n    let xEdgeGap = 10;\r\n    const yPart = (svgHeight - yEdgeGap * 2 + gap) / props.height;\r\n    const xPart = (svgWidth - xEdgeGap * 2 + gap) / props.width;\r\n    if (yPart > xPart) {\r\n        yEdgeGap += (yPart - xPart) * props.height / 2;\r\n    }\r\n    else if (xPart > yPart) {\r\n        xEdgeGap += (xPart - yPart) * props.width / 2;\r\n    }\r\n    const yRange = d3.scaleLinear().domain([0, props.height]).range([ yEdgeGap - gap/2, svgHeight - yEdgeGap + gap/2 ]);\r\n    const cellHeight = yRange(1)-yRange(0) - gap;\r\n    const xRange = d3.scaleLinear().domain([0, props.width]).range([ xEdgeGap - gap/2, svgWidth - xEdgeGap + gap/2 ]);\r\n    const cellWidth = xRange(1)-xRange(0) - gap;\r\n    const cellSize = Math.min(cellHeight, cellWidth);\r\n\r\n    React.useEffect(() => {\r\n        if (!ref.current) {\r\n            return;\r\n        }\r\n\r\n        const svg = d3.select(ref.current);\r\n        const root = svg.selectAll('g.root')\r\n            .data([0])\r\n            .join(enter => enter.append('g').attr('class', 'root'));\r\n\r\n        const cells = root.selectAll('g.cell')\r\n            .data(props.data)\r\n            .join(enter => enter.append('g').attr('class', 'cell'))\r\n            .attr('transform', (d, ix) => {\r\n                const x = ix % props.width;\r\n                const y = Math.floor(ix / props.width);\r\n                const tx = xRange(x + 0.5);\r\n                const ty = yRange(y + 0.5);\r\n                return `translate(${tx},${ty})`;\r\n            });\r\n        // cells.selectAll('rect.border')\r\n        //     .data([0])\r\n        //     .join(enter => enter.append('rect').attr('class', 'border'))\r\n        //     .attr('x', -cellSize/2)\r\n        //     .attr('y', -cellSize/2)\r\n        //     .attr('width', cellSize)\r\n        //     .attr('height', cellSize)\r\n        //     .attr('style', 'stroke-width: 3; stroke: black; fill: none;');\r\n        \r\n        if(props.withColor) {\r\n            const arc = d3.arc().innerRadius(0).outerRadius(cellSize/2).startAngle(0);\r\n            const arcTween = function(this: any, d: number) {\r\n                const interpolate = d3.interpolate(this._current as number, d);\r\n                this._current = d;\r\n                return function(t: number) {\r\n                    return arc({ endAngle: interpolate(t) } as any) as string;\r\n                }\r\n            }\r\n            cells.selectAll('path.color')\r\n                .data(d => [d / props.maxRotationValue * Math.PI * 2])\r\n                .join(enter => enter.append('path').attr('class', 'color'))\r\n                .attr('style', 'fill: red;')\r\n                .transition()\r\n                .duration(100)\r\n                .attrTween('d', arcTween)\r\n            ;\r\n        } else {\r\n            cells.selectAll('path.color').remove();\r\n        }\r\n\r\n        const bars = cells.selectAll('rect.spinner')\r\n            .data(d => [d])\r\n            .join(enter => enter.append('rect').attr('class', 'spinner'))\r\n            .attr('x', -cellSize/2)\r\n            .attr('width', cellSize)\r\n            .attr('y', -cellSize*spinnerRatio/2)\r\n            .attr('height', cellSize*spinnerRatio)\r\n            .attr('style', invert ? 'fill: black' : 'fill: white')\r\n            .transition().duration(150)\r\n        ;\r\n        if(props.withColor) {\r\n            const rotateTween = function(this: any, d: number) {\r\n                // console.log({ t: this });\r\n                return d3.interpolateString(d3.select(this).attr('transform'), `rotate(${d / props.maxRotationValue * 360 + 90})`);\r\n            }\r\n            bars.attrTween('transform', rotateTween);\r\n        } else {\r\n            bars.attr('transform', d => `rotate(${d / props.maxRotationValue * 360 + 90})`);\r\n        }\r\n    });\r\n    return <svg className=\"d3-wall-display\" ref={ref} height={svgHeight} width={svgWidth}/>;\r\n};\r\n\r\nexport default D3WallDisplay;\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport D3WallDisplay from './d3WallDisplay';\r\nimport * as gm from 'gammacv';\r\n\r\ninterface LiveWallProps {\r\n}\r\n\r\nconst LiveWall: React.FunctionComponent<LiveWallProps> = (props) => {\r\n    const height = 720;\r\n    const width = 1280;\r\n\r\n    const [ invert, setInvert ] = React.useState(false);\r\n    const [ tempBarCount, setTempBarCount ] = React.useState(48);\r\n    const [ barCount, setBarCount ] = React.useState(48);\r\n    const recentFrameTimes = React.useRef<Date[]>([]);\r\n    const canvas = React.useRef<HTMLCanvasElement>(null);\r\n    const [ data, setData ] = React.useState({ x: 0, y: 0, values: [] as number[] });\r\n    const [ error, setError ] = React.useState<string | undefined>();\r\n    const [ showCanvas, setShowCanvas ] = React.useState(false);\r\n    const toggleCanvas = React.useCallback(() => {\r\n        setShowCanvas(!showCanvas);\r\n    }, [showCanvas, setShowCanvas ]);\r\n    React.useEffect(() => {\r\n        const sess = new gm.Session();\r\n        const stream = new gm.CaptureVideo(width, height);\r\n        stream.start().catch((e: string) => {\r\n            console.log(e);\r\n            setError(e.toString());\r\n        });\r\n\r\n        const input = new gm.Tensor('uint8', [height, width, 4]);\r\n        let pipeline = input;\r\n        pipeline = gm.grayscale(pipeline);\r\n        const hogArg = Math.floor(Math.max(height, width) / barCount);\r\n        pipeline = gm.hog(pipeline, hogArg, 'max');\r\n        // console.log('initializing hog with ' + hogArg);\r\n\r\n        const output = gm.tensorFrom(pipeline);\r\n        sess.init(pipeline);\r\n\r\n        const callback = () => {\r\n            // console.log('frame with hog with ' + hogArg);\r\n            // console.log('anim frame');\r\n            stream.getImageBuffer(input);\r\n            sess.runOp(pipeline, {}, output);\r\n\r\n            // console.log(output);\r\n\r\n            const y = output.shape[0];\r\n            const x = output.shape[1];\r\n            setData({ x, y, values: _.range(0, y).flatMap(i => _.range(0, x).map(ii => output.get(i, ii, 1) as number)) });\r\n            if (canvas.current) {\r\n                gm.canvasFromTensor(canvas.current, input);\r\n            }\r\n            // setData({ x, y, values: [] });\r\n            // console.log(output);\r\n            // console.log(_.take(output.values, 100));\r\n            // window.cancelAnimationFrame(timeout);\r\n            // return;\r\n\r\n            const now = new Date();\r\n            recentFrameTimes.current.push(now);\r\n            recentFrameTimes.current = recentFrameTimes.current.filter(i => now.getTime() < i.getTime() + 1000);\r\n\r\n            timeout = window.requestAnimationFrame(callback);\r\n        }\r\n\r\n        let timeout = window.requestAnimationFrame(callback);\r\n        return () => {\r\n            window.cancelAnimationFrame(timeout);\r\n        };\r\n    }, [ setData, barCount ]);\r\n    if (error) {\r\n        return <div>Error: {error}</div>\r\n    }\r\n    // console.log(data);\r\n    const { x, y, values } = data;\r\n    if (x <= 0 || y <= 0) {\r\n        return <div>Enabling camera...</div>\r\n    }\r\n    // console.log({ max: _.max(values), min: _.min(values)});\r\n    // return <div>Dummy</div>;\r\n    return (\r\n        <div>\r\n            <div style={ { position: 'fixed', color: invert ? 'black' : 'white', display: 'flex', flexDirection: 'column', width: '100px' }}>\r\n                <button onClick={toggleCanvas}>{showCanvas ? 'Hide' : 'Show'} image</button>\r\n                <span>FPS: {recentFrameTimes.current.length}</span>\r\n                <label htmlFor=\"spinners\">Approx spinners:</label>\r\n                <input type=\"number\" max={50} min={1} id=\"spinners\" onChange={(e) => setTempBarCount(parseInt(e.target.value))} value={tempBarCount}/>\r\n                <button onClick={() => setBarCount(tempBarCount)}>Update spinners</button>\r\n                <span style={ { display: 'flex'} }>\r\n                    <label htmlFor=\"invert\">Invert:</label>\r\n                    <input type=\"checkbox\" checked={invert} onChange={e => setInvert(e.target.checked)} />\r\n                </span>\r\n            </div>\r\n            <div style={ { background: invert ? 'white' : 'black', zIndex: -2, position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 } }/>\r\n            <canvas height={height} width={width} style={ { display: showCanvas ? 'block' : 'none', zIndex: -1, opacity: 0.5, position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'} } ref={canvas}/>\r\n            <D3WallDisplay height={y} width={x} maxRotationValue={90} data={values} invert={invert} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiveWall;\r\n","import React from 'react';\r\nimport Wall from './wall';\r\nimport LiveWall from './liveWall';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <LiveWall/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}