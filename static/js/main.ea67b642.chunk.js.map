{"version":3,"sources":["cell.tsx","wallDisplay.tsx","wall.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","props","value","maxValue","style","lastValueHolder","React","realValue","Math","abs","current","transform","className","WallDisplay","columnCount","width","_","height","map","y","x","key","gridColumn","gridRow","maxRotationValue","data","patterns","i","ii","Wall","ix","incrementIx","setTimeout","onClick","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAmCeA,EA1BkC,SAACC,GAK9C,IALyD,IACjDC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACnBC,EAAkBC,SAAaJ,GAEjCK,EAAaL,EAAQC,EAAY,IAC9BK,KAAKC,IAAIF,EAAYF,EAAgBK,SAAW,KACnDH,GAAcA,EAAYF,EAAgBK,QAAW,KAAO,IAE5DF,KAAKC,IAAIF,EAAY,IAAMF,EAAgBK,SAAWF,KAAKC,IAAIF,EAAYF,EAAgBK,WAC3FH,GAAa,KAEbC,KAAKC,IAAIF,EAAY,IAAMF,EAAgBK,SAAWF,KAAKC,IAAIF,EAAYF,EAAgBK,WAC3FH,GAAa,KAGjBF,EAAgBK,QAAUH,EAE1B,IAAMI,EAAY,UAAYJ,EAAY,OAE1C,OACI,uBAAKK,UAAU,OAAOR,MAAOA,GAEzB,uBAAKQ,UAAU,UAAUR,MAAQ,CAAEO,UAAWA,OCN3CE,G,MAZgD,SAACZ,GAC5D,OACI,uBAAKW,UAAU,eAAeR,MAAQ,CAAEU,YAAab,EAAMc,QACtDC,QAAQ,EAAGf,EAAMgB,QAAQC,KAAI,SAAAC,GAC1B,OAAOH,QAAQ,EAAGf,EAAMc,OAAOG,KAAI,SAAAE,GAC/B,OAAO,gBAAC,EAAD,CAAMC,IAAG,UAAKF,EAAL,YAAUC,GAAKhB,MAAQ,CAAEkB,WAAYF,EAAI,EAAGG,QAASJ,EAAI,GAAKhB,SAAUF,EAAMuB,iBAAkBtB,MAAOD,EAAMwB,KAAKN,GAAGC,cCXnJM,EAAWV,QAAQ,EAAE,IAAIE,KAAI,SAAAE,GAAC,OAAIJ,QAAQ,EAAG,IAAIE,KAAI,SAAAS,GAAC,OAAIX,QAAQ,EAAG,IAAIE,KAAI,SAAAU,GAAE,OAAKR,EAAIO,EAAIC,GAAM,YAqCzFC,EAnCkC,SAAC5B,GAAW,IAAD,EAC5BK,cAAiB,SAACJ,GAAD,OAAYA,EAAQ,GAAK,KAAI,GADlB,mBAChD4B,EADgD,KAC5CC,EAD4C,KAElDN,EAAOC,EAASI,GAMtBxB,aAAgB,WACZ0B,WAAWD,EAAa,OACzB,CAACD,EAAIC,IAER,IAAME,EAAU3B,eAAkB,cAAU,IAa5C,OACI,uBAAK2B,QAASA,GACV,gBAAC,EAAD,CAAahB,OAAQQ,EAAKS,OAAQnB,MAAOU,EAAK,GAAGS,OAAQV,iBAAkB,GAAIC,KAAMA,IADzF,MC1BOU,EANO,WACpB,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea67b642.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ninterface CellProps {\r\n    value: number;\r\n    maxValue: number;\r\n    style: React.CSSProperties;\r\n}\r\n\r\nconst Cell: React.FunctionComponent<CellProps> = (props) => {\r\n    const { value, maxValue, style } = props;\r\n    const lastValueHolder = React.useRef(value);\r\n    // const rot = Math.floor((value / maxValue) * 12);\r\n    let realValue = (value / maxValue) * 360;\r\n    while (Math.abs(realValue - lastValueHolder.current) > 180) {\r\n        realValue += (realValue < lastValueHolder.current) ? 180 : -180;\r\n    }\r\n    if (Math.abs(realValue + 180 - lastValueHolder.current) < Math.abs(realValue - lastValueHolder.current)) {\r\n        realValue += 180;\r\n    }\r\n    if (Math.abs(realValue - 180 - lastValueHolder.current) < Math.abs(realValue - lastValueHolder.current)) {\r\n        realValue -= 180;\r\n    }\r\n\r\n    lastValueHolder.current = realValue;\r\n\r\n    const transform = 'rotate(' + realValue + 'deg)';\r\n    // console.log(transform);\r\n    return (\r\n        <div className=\"cell\" style={style}>\r\n            {/* <div className={classNames('spinner', `spinner-${rot}`)}/>  */}\r\n            <div className=\"spinner\" style={ { transform: transform }}/>\r\n        </div>\r\n    );\r\n};\r\nexport default Cell;\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport Cell from './cell';\r\n\r\nimport './wallDisplay.scss';\r\n\r\ninterface WallDisplayProps {\r\n    height: number;\r\n    width: number;\r\n    maxRotationValue: number;\r\n    data: number[][];\r\n}\r\n\r\nconst WallDisplay: React.FunctionComponent<WallDisplayProps> = (props) => {\r\n    return (\r\n        <div className=\"wall-display\" style={ { columnCount: props.width }}>\r\n            {_.range(0, props.height).map(y => {\r\n                return _.range(0, props.width).map(x => {\r\n                    return <Cell key={`${y}_${x}`} style={ { gridColumn: x + 1, gridRow: y + 1 }} maxValue={props.maxRotationValue} value={props.data[y][x]}/>;\r\n                })\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WallDisplay;\r\n","import * as React from 'react';\r\nimport WallDisplay from './wallDisplay';\r\nimport * as _ from 'lodash';\r\n\r\ninterface WallProps {\r\n}\r\n\r\nconst patterns = _.range(0,12).map(x => _.range(0, 12).map(i => _.range(0, 24).map(ii => (x + i + ii) % 12)));\r\n\r\nconst Wall: React.FunctionComponent<WallProps> = (props) => {\r\n    const [ ix, incrementIx ] = React.useReducer((value) => (value + 1) % 12, 0);\r\n    const data = patterns[ix];\r\n    // React.useEffect(() => {\r\n    //     const t = setInterval(incrementIx, 500);\r\n\r\n    //     return () => { clearInterval(t); }\r\n    // }, [incrementIx]);\r\n    React.useEffect(() => {\r\n        setTimeout(incrementIx, 150);\r\n    }, [ix, incrementIx])\r\n\r\n    const onClick = React.useCallback(() => {}, []);\r\n\r\n\r\n    // const [data, setData] = React.useState(_.range(0, 12).map(i => _.range(0, 24).map(ii => (i + ii) % 12)));\r\n    // const onClick = React.useCallback(() => {\r\n    //     if (Math.random() < 0.5) {\r\n    //         const offset = Math.floor(Math.random() * 12);\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => (offset + i + ii) % 12)));\r\n    //     } else {\r\n    //         setData(_.range(0, 12).map(i => _.range(0, 24).map(ii => Math.floor(Math.random() * 12))));\r\n    //     }\r\n    // }, [ setData ]);\r\n\r\n    return (\r\n        <div onClick={onClick}>\r\n            <WallDisplay height={data.length} width={data[0].length} maxRotationValue={12} data={data} />;\r\n        </div>\r\n    );\r\n    // return (\r\n    //     <></>\r\n    // );\r\n};\r\n\r\nexport default Wall;\r\n","import React from 'react';\nimport Wall from './wall';\n\nconst App: React.FC = () => {\n  return (\n    <Wall/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}